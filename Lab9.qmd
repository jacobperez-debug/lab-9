---
title: "Lab 9: Generative Art"
author: "Jacob Perez"
format: html
editor: visual
embed-resources: true
---

```{r}
#| message: false

# load necessary libraries
library(dplyr)
library(purrr)
library(tidyr)
library(tibble)
library(ggplot2)
library(ambient)
library(tictoc)
library(ggthemes)
library(gifski)
```

# Making Art from Code

### Create a Piece Using `mpg` Data Set

```{r}
mpg |>
  ggplot(aes(displ, hwy, colour = drv, size = cyl)) + 
  geom_point(show.legend = FALSE, size = 1) + 
  geom_point(show.legend = FALSE, size = 3, color = "#22222222") +
  geom_point(show.legend = FALSE) +
  theme_void() + 
  scale_color_brewer(palette = "BuPu")
```

### Use `polar_art()`

```{r}
polar_art <- function(seed, n, palette) {
  
  # set the state of the random number generator
  set.seed(seed)
  
  # data frame containing random values for 
  # aesthetics we might want to use in the art
  dat <- tibble(
    x0 = runif(n),
    y0 = runif(n),
    x1 = x0 + runif(n, min = -.2, max = .2),
    y1 = y0 + runif(n, min = -.2, max = .2),
    shade = runif(n), 
    size = runif(n)
  )
  
  # plot segments in various colours, using 
  # polar coordinates and a gradient palette
  dat |> 
    ggplot(aes(
      x = x0,
      y = y0,
      xend = x1,
      yend = y1,
      colour = shade,
      size = size
    )) +
    geom_segment(show.legend = FALSE) +
    coord_polar() +
    scale_y_continuous(expand = c(0, 0)) +
    scale_x_continuous(expand = c(0, 0)) + 
    scale_colour_gradientn(colours = palette) + 
    scale_size(range = c(0, 10)) + 
    theme_void()
}
```

```{r}
# true damage ekko color palette

polar_art(seed = 7, n = 100, palette = c("#b453e1", "#74b5e9", "#dcbb63", "#745853", "#5e6ec4", "#373b66", "#c2c0e2" ))
```

### Modify `polar_art()`

```{r}
polar_art_mod <- function(seed, n, palette) {
  set.seed(seed)

  dat <- tibble(
    angle = runif(n, 0, 2 * pi),
    radius = runif(n, 0.1, 1),
    shift = runif(n, 0.05, 0.4),
    shade = runif(n),
    size = runif(n, 0.3, 1.5)
  ) |> 
    mutate(
      x = radius * cos(angle),
      y = radius * sin(angle),
      xend = (radius + shift) * cos(angle + shift),
      yend = (radius + shift) * sin(angle + shift)
    )

  ggplot(dat, aes(
    x = x,
    y = y,
    xend = xend,
    yend = yend,
    colour = shade,
    size = size
  )) +
    geom_segment(lineend = "round", show.legend = FALSE) +
    coord_polar() +
    scale_y_continuous(expand = c(0, 0)) +  
    scale_x_continuous(expand = c(0, 0)) +  
    scale_colour_gradientn(colours = palette) +
    scale_size(range = c(0, 3)) +
    theme_void()
}
```

```{r}
polar_art_mod(seed = 7, n = 150, palette = c("#b453e1", "#74b5e9", "#dcbb63", "#745853", "#5e6ec4", "#373b66", "#c2c0e2" ))
```

### Use `sample_canva()`

```{r}
sample_canva <- function(seed = NULL) {
  if(!is.null(seed)) set.seed(seed)
  sample(ggthemes::canva_palettes, 1)[[1]]
}
```

```{r}
polar_art(seed = 1, n = 150, palette = sample_canva(seed = 5))
polar_art(seed = 6, n = 150, palette = sample_canva(seed = 5))
polar_art(seed = 3, n = 150, palette = sample_canva(seed = 5))
```

### Create `sample_named_colours()`

```{r}
sample_named_colours <- function(n) {
  # Get all distinct named colours
  all_colours <- colours(distinct = TRUE)
  
  # Sample without replacement
  sample(all_colours, size = n)
}
```

```{r}
show_col(sample_named_colours(6))
```

### Use `sample_canva()`, `sample_data()`, and `polar_styled_plot()`

```{r}
sample_data <- function(seed = NULL, n = 100){
  if(!is.null(seed)) set.seed(seed)
  dat <- tibble(
    x0 = runif(n),
    y0 = runif(n),
    x1 = x0 + runif(n, min = -.2, max = .2),
    y1 = y0 + runif(n, min = -.2, max = .2),
    shade = runif(n), 
    size = runif(n),
    shape = factor(sample(0:22, size = n, replace = TRUE))
  )
}

polar_styled_plot <- function(data = NULL, palette) {
  ggplot(
    data = data,
    mapping = aes(
      x = x0,
      y = y0,
      xend = x1,
      yend = y1,
      colour = shade,
      size = size
    )) + 
    coord_polar(clip = "off") +
    scale_y_continuous(
      expand = c(0, 0),
      limits = c(0, 1), 
      oob = scales::oob_keep
    ) +
    scale_x_continuous(
      expand = c(0, 0), 
      limits = c(0, 1), 
      oob = scales::oob_keep
    ) + 
    scale_colour_gradientn(colours = palette) + 
    scale_size(range = c(0, 10)) + 
    theme_void() + 
    guides(
      colour = guide_none(),
      size = guide_none(),
      fill = guide_none(),
      shape = guide_none()
    )
}
```

```{r}
dat <- sample_data(n = 100, seed = 7) 
pal <- c("#b453e1", "#74b5e9", "#dcbb63", "#745853", "#5e6ec4", "#373b66", "#c2c0e2" )

polar_styled_plot(data = dat, palette = pal) + geom_segment()
polar_styled_plot(data = dat, palette = pal) + geom_path()
polar_styled_plot(data = dat, palette = pal) + geom_point()
```

# Art Gallery 

## Piece 1

```{r}
library(dplyr)

dat1 <- sample_data(n = 500, seed = 123) 
dat2 <- sample_data(n = 50, seed = 456) |>  
  mutate(y0 = .3 + y0 * .6, y1 = .3)
dat3 <- sample_data(n = 50, seed = 619) |>  
  mutate(y0 = .3 + y0 * .6, y1 = .3)
dat4 <- sample_data(n = 30, seed = 720) |>  
  mutate(y0 = .3 + y0 * .6, y1 = .3)
dat5 <- sample_data(n = 15, seed = 70) |>  
  mutate(y0 = .3 + y0 * .6, y1 = .3)

polar_styled_plot(palette = c("#b453e1", "#745853", "#5e6ec4", "#373b66", "#c2c0e2", "#4b3a3d", "#221f35", "#4f656f" )) + 
  geom_segment(
    data = dat1 |> mutate(size = size * 3)
  ) +
  geom_point(
    data = dat2 |> mutate(size = size * 2),
    colour = "#74b5e9"
  ) +
  geom_point(
    data = dat3 |> mutate(size = size * 2),
    colour = "#373b66"
  ) +
  geom_point(
    data = dat4 |> mutate(size = size * 2),
    colour = "#dcbb63"
  ) +
  geom_point(
    data = dat5 |> mutate(size = size * 2),
    colour = "white"
  )
```

## Perlin Ekko

```{r}
show_polygon <- function(polygon, show_vertices = TRUE, ...) {
  
  pic <- ggplot(polygon, aes(x, y)) +
    geom_polygon(colour = "black", fill = NA, show.legend = FALSE, ...) +
    coord_equal() + 
    theme_void()
  
  if(show_vertices == TRUE) {
    pic <- pic + geom_point(colour = "black", size = 2)
  }
  return(pic)
}
```

```{r}
hourglass_x <- function(angle) {
  x <- sin(angle) * abs(cos(angle))^1.2
  return(x)
}

hourglass_y <- function(angle) {
  y <- cos(angle)
  return(y)
}

hourglass_shape <- tibble(
  angle = seq(0, 2 * pi, length.out = 50),
  x = hourglass_x(angle),
  y = hourglass_y(angle)
)

show_polygon(hourglass_shape)
```

```{r}
normalize_radius <- function(x, min, max) {
  scales::rescale(x, from = c(-0.5, 0.5), to = c(min, max))
}

perlin_hourglass <- function(n = 100,
                              freq_init = 0.3,
                              octaves = 2,
                              r_min = 0.5,
                              r_max = 1,
                              x_shift = 0,
                              y_shift = 0,
                              id = NA,
                              seed = NULL) {
  if (!is.null(seed)) set.seed(seed)
  tibble(
    angle = seq(0, 2 * pi, length.out = n),
    x_base = cos(angle),
    y_base = sin(angle),
    radius = fracture(
      x = x_base,
      y = y_base,
      freq_init = freq_init,
      noise = gen_perlin,
      fractal = fbm,
      octaves = octaves
    ) |> normalize_radius(r_min, r_max),
    x = radius * hourglass_x(angle) + x_shift,
    y = radius * hourglass_y(angle) + y_shift,
    id = id
  )
}
```


```{r}
perlin_hourglass(seed = 1) |> show_polygon(FALSE)
perlin_hourglass(seed = 2) |> show_polygon(FALSE)
perlin_hourglass(seed = 3) |> show_polygon(FALSE)
```

```{r}
sample_canva <- function(seed = NULL) {
  if(!is.null(seed)) set.seed(seed)
  sample(ggthemes::canva_palettes, 1)[[1]]
}
```

```{r}
perlin_hourglass_grid <- function(nx = 10, ny = 6, seed = NULL) {
  if (!is.null(seed)) set.seed(seed)

  hourglass_settings <- expand_grid(
    r_min = 0.3,
    r_max = 0.4,
    x_shift = 1:nx,
    y_shift = 1:ny
  ) |>
    mutate(id = row_number())

  hourglass_data <- pmap_dfr(hourglass_settings, perlin_hourglass)

  hourglass_data |>
    ggplot(aes(x, y, group = id, fill = sample(id))) +
    geom_polygon(size = 0, show.legend = FALSE) +
    theme_void() +
    scale_fill_gradientn(colours = sample_canva(seed)) +
    coord_equal(xlim = c(0, nx + 1), ylim = c(0, ny + 1))
}

perlin_hourglass_grid(seed = 451)
```

```{r}
perlin_hourglass2 <- function(n = 100, 
                          freq_init = 0.3,
                          octaves = 2, 
                          r_min = 0.5, 
                          r_max = 1,
                          w_min = 0,
                          w_max = 4,
                          rot = 0,
                          x_shift = 0,
                          y_shift = 0,
                          id = NA,
                          seed = NULL) {
  if(!is.null(seed)) set.seed(seed)
  tibble(
    angle = seq(0, 2*pi, length.out = n),
    
    radius = fracture(
      x = cos(angle), 
      y = sin(angle), 
      freq_init = freq_init,
      noise = gen_perlin, 
      fractal = fbm, 
      octaves = octaves
    ) |>
      normalise_radius(r_min, r_max),
    
    x = radius * hourglass_x(angle) + x_shift,
    y = radius * hourglass_y(angle) + y_shift,
    
    width = fracture(
      x = cos(angle + rot), 
      y = sin(angle + rot), 
      freq_init = freq_init,
      noise = gen_perlin, 
      fractal = fbm, 
      octaves = octaves
    ) |>
      normalise(to = c(w_min, w_max)),
    
    id = id
  )
}
```

```{r}
show_width <- function(polygon) {
  ggplot(polygon, aes(x, y, size = width)) +
    geom_path(colour = "black", show.legend = FALSE) + 
    coord_equal() + 
    scale_size_identity() +
    theme_void()
}

perlin_hourglass2(n = 1000, rot = 0, seed = 2) |> show_width()
perlin_hourglass2(n = 1000, rot = pi / 2, seed = 2) |> show_width()
perlin_hourglass2(n = 1000, rot = pi, seed = 2) |> show_width()
```

```{r}
perlin_hourglass_grid2 <- function(nx = 4, ny = 2, seed = NULL) {
  if(!is.null(seed)) set.seed(seed)
  
  hourglass_settings <- expand_grid(
    r_min = .3, 
    r_max = .4, 
    w_min = .01,
    w_max = 6,
    x_shift = 1:nx, 
    y_shift = 1:ny
  ) |>
    mutate(
      n = 200,
      x_shift = x_shift + runif(n(), -.1, .1),
      y_shift = y_shift + runif(n(), -.1, .1),
      rot = runif(n(), -.1, .1),
      id = row_number()
    ) 
  
  hourglass_data <-  pmap_dfr(hourglass_settings, perlin_hourglass2)
  
  hourglass_data |>
    ggplot(aes(x, y, group = id, colour = sample(id), size = width)) +
    geom_path(show.legend = FALSE) +
    theme_void() +
    scale_size_identity() +
    scale_colour_gradientn(colours = sample_canva(seed)) +
    scale_x_continuous(expand = c(0, 0)) +
    scale_y_continuous(expand = c(0, 0)) +
    coord_fixed(xlim = c(0, nx + 1), ylim = c(0, ny + 1))
}

perlin_hourglass_grid2(seed = 666)
```

```{r}
perlin_hourglass_data <- function(nhourglasses = 10, scatter = 0.05, seed = NULL) {
  
  if (!is.null(seed)) set.seed(seed)
  
  palette <- sample_canva(seed) |>
    (\(x) colorRampPalette(x)(nhourglasses))()
  
  hourglass_settings <- tibble(
    id = 1:nhourglasses,
    n = 500,
    r_min = 0.35,
    r_max = 0.4,
    w_min = -10,
    w_max = 10,
    x_shift = runif(nhourglasses, -scatter / 2, scatter / 2),
    y_shift = runif(nhourglasses, -scatter / 2, scatter / 2),
    rot = runif(nhourglasses, -pi, pi)
  )
  
  hourglass_settings |>
    pmap_dfr(perlin_hourglass2) |>  
    group_by(id) |>
    mutate(
      shade = sample(palette, 1),
      width = abs(width)
    )
}

generate_one_frame <- function(dat) {
  
  pic <- dat |>
    ggplot(aes(x, y, group = id, size = width, colour = shade)) +
    geom_path(show.legend = FALSE) +
    theme_void() +
    scale_x_continuous(expand = c(0, 0)) +
    scale_y_continuous(expand = c(0, 0)) +
    scale_colour_identity() +
    scale_size_identity() +
    coord_fixed(xlim = c(-0.6, 0.6), ylim = c(-0.6, 0.6))
  
  print(pic)
}

rotate_vector <- function(x, percent) {
  
  len <- length(x)
  ind <- ceiling(len * percent)
  if (ind == 0) return(x)
  if (ind == len) return(x)
  c(x[(ind + 1):len], x[1:ind])
}

generate_all_frames <- function(dat, nframes = 100) {
  
  for (frame in 1:nframes) {
    dat_frame <- dat |>
      group_by(id) |>
      mutate(width = rotate_vector(width, frame / nframes))
    
    generate_one_frame(dat_frame)
  }
}

animated_perlin_hourglass <- function(seed, ...) {
  
  save_gif(
    expr = perlin_hourglass_data(seed = seed, ...) |> generate_all_frames(),
    gif_file = paste0("animated-perlin-hourglass-", seed, ".gif"),
    height = 1000,
    width = 1000,
    delay = 0.1,
    progress = TRUE,
    bg = "#222222"
  )
  invisible(NULL)
}
```

```{r}
tic()
animated_perlin_hourglass(seed = 100)
toc()
```

```{r}
knitr::include_graphics("animated-perlin-hourglass-100.gif") 
```

```{r}
perlin_hourglass_data_2 <- function(nhourglasses = 10, scatter = 0.05, palette = NULL) {
  
  # Ensure palette is long enough
  if (length(palette) < nhourglasses) {
    stop("Palette must have at least as many colors as nhourglasses")
  }
  
  hourglass_settings <- tibble(
    id = 1:nhourglasses,
    n = 500,
    r_min = 0.35,
    r_max = 0.4,
    w_min = -10,
    w_max = 10,
    x_shift = runif(nhourglasses, -scatter / 2, scatter / 2),
    y_shift = runif(nhourglasses, -scatter / 2, scatter / 2),
    rot = runif(nhourglasses, -pi, pi)
  )
  
  hourglass_settings |>
    pmap_dfr(perlin_hourglass2) |>  
    group_by(id) |>
    mutate(
      shade = palette[id],
      width = abs(width)
    )
}

generate_one_frame <- function(dat) {
  
  pic <- dat |>
    ggplot(aes(x, y, group = id, size = width, colour = shade)) +
    geom_path(show.legend = FALSE) +
    theme_void() +
    scale_x_continuous(expand = c(0, 0)) +
    scale_y_continuous(expand = c(0, 0)) +
    scale_colour_identity() +
    scale_size_identity() +
    coord_fixed(xlim = c(-0.6, 0.6), ylim = c(-0.6, 0.6))
  
  print(pic)
}

rotate_vector <- function(x, percent) {
  
  len <- length(x)
  ind <- ceiling(len * percent)
  if (ind == 0) return(x)
  if (ind == len) return(x)
  c(x[(ind + 1):len], x[1:ind])
}

generate_all_frames <- function(dat, nframes = 100) {
  
  for (frame in 1:nframes) {
    dat_frame <- dat |>
      group_by(id) |>
      mutate(width = rotate_vector(width, frame / nframes))
    
    generate_one_frame(dat_frame)
  }
}

animated_perlin_hourglass_2 <- function(palette_name, palette, ...) {
  
  save_gif(
    expr = perlin_hourglass_data_2(palette = palette, ...) |> generate_all_frames(),
    gif_file = paste0("animated-perlin-hourglass-", palette_name, ".gif"),
    height = 1000,
    width = 1000,
    delay = 0.1,
    progress = TRUE,
    bg = "#222222"
  )
  invisible(NULL)
}
```

```{r}
sandstorm_ekko <- c("#733726", "#3d2934", "#a87750", "#f3e791", "#d4b677", "#cebb92", "#f0ebd2", "#73564a", "#e38d4a", "#a75919", "#322755", "#a53a65")

pulsefire_ekko <- c("#dbcdc9", "#2b3247", "#576b95", "#76bae1", "#5b89c1", "#7f6565", "#545061", "#202531", "#e6bc92", "#606c7a", "#a46360", "white")

starguardian_ekko <- c("#e4a6b3", "#3e2848", "#8e74c7", "#9d5f7e", "#6c5294", "#764761", "#aaade8", "white", "#cd464c", "#7c6d68", "#f8552a", "#e0ab58")
```


```{r}
animated_perlin_hourglass_2(nhourglasses = 12, palette_name = "sandstorm_ekko", palette = sandstorm_ekko)
knitr::include_graphics("animated-perlin-hourglass-sandstorm_ekko.gif") 

animated_perlin_hourglass_2(nhourglasses = 12, palette_name = "pulsefire_ekko", palette = pulsefire_ekko)
knitr::include_graphics("animated-perlin-hourglass-pulsefire_ekko.gif")

animated_perlin_hourglass_2(nhourglasses = 12, palette_name = "starguardian_ekko", palette = starguardian_ekko)
knitr::include_graphics("animated-perlin-hourglass-starguardian_ekko.gif")
```

